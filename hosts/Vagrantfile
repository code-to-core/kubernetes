Vagrant.configure("2") do |c|

    c.vm.define "ethics-gradient" do |eg|
        eg.vm.box = "bento/ubuntu-16.04"
        eg.vm.hostname = "ethics-gradient"

        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        eg.vm.network "public_network", 
            use_dhcp_assigned_default_route: true,
            :bridge => 'enp4s0'

        # Configure ports specific to Master

        # Forward port for Kubernetes API server
        eg.vm.network "forwarded_port", guest:  6443, host: 6443

        # Forward ports for etcd server client API
        for i in 2379..2380
            eg.vm.network :forwarded_port, guest: i, host: i
        end

        # Forward port for kube-scheduler
        eg.vm.network "forwarded_port", guest:  10251, host: 10251

        # Forward port for kube-controller-manager
        eg.vm.network "forwarded_port", guest:  10252, host: 10252

        #eg.vm.network "private_network", type: "dhcp"
    end

    c.vm.define "serious-callers-only" do |sco|
        sco.vm.box = "bento/ubuntu-16.04"
        sco.vm.hostname = "serious-callers-only"

        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        sco.vm.network "public_network", 
            use_dhcp_assigned_default_route: true,
            :bridge => 'wlan0'

        # Configure ports specific for worker nodes
        sco.vm.network "forwarded_port", guest:  6443, host: 6443
        #sco.vm.network "private_network", type: "dhcp"
    end

    c.vm.define "contents-may-differ" do |cmd|
        cmd.vm.box = "bento/ubuntu-16.04"
        cmd.vm.hostname = "contents-may-differ"

        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        cmd.vm.network "public_network", 
            use_dhcp_assigned_default_route: true,
            :bridge => 'enp2s0'
        cmd.vm.network "forwarded_port", guest:  6443, host: 6443
        #cmd.vm.network "private_network", type: "dhcp"
    end


    c.vm.define "honest-mistake" do |hm|
        hm.vm.box = "bento/ubuntu-16.04"
        hm.vm.hostname = "honest-mistake"

        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        hm.vm.network "public_network", 
            use_dhcp_assigned_default_route: true,
            :bridge => 'wlp3s0f0'
        hm.vm.network "forwarded_port", guest:  6443, host: 6443
        #hm.vm.network "private_network", type: "dhcp"
    end

    # Forward ports common to master and worker nodes

    # Forward port for Kubelet API
    c.vm.network "forwarded_port", guest:  10250, host: 10250

    # Forward port Read-only Kubelet API
    c.vm.network "forwarded_port", guest:  10255, host: 10255

    # Forward ports for Nodeport services
    for i in 30000..32767
        c.vm.network :forwarded_port, guest: i, host: i
    end

    c.vm.provider :virtualbox do |vb|
        vb.customize [
            'modifyvm', :id,
            '--natdnshostresolver1', 'on',
            '--memory', '2048',
            '--cpus', '2'
         ]
    end

    # Provision Docker on the VM
    c.vm.provision "docker" do |d|
    end

    # The next steps will install kubeadm, kubelet and kubectl
    c.vm.provision :shell,
    inline: "apt-get update && apt-get install -y apt-transport-https",
    privileged: true

    c.vm.provision :shell,
    inline: "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -",
    privileged: true

    c.vm.provision :shell,
    inline: "echo deb http://apt.kubernetes.io/ kubernetes-xenial main > /etc/apt/sources.list.d/kubernetes.list",
    privileged: true

    c.vm.provision :shell,
    inline: "apt-get update",
    privileged: true

    c.vm.provision :shell,
    inline: "apt-get install -y kubelet kubeadm kubectl",
    privileged: true

    c.vm.provision :shell,
    inline: "swapoff -a",
    privileged: true

    c.vm.provision :shell,
    inline: "sysctl net.bridge.bridge-nf-call-iptables=1",
    privileged: true

    #c.vm.provision :shell,
    #inline: "kubeadm init --pod-network-cidr=10.244.0.0/16",
    #privileged: true

#    c.vm.provision :shell,
#    inline: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml",
#    privileged: true

end
